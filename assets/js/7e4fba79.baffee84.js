"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[22874],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,m=u["".concat(s,".").concat(d)]||u[d]||g[d]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},28450:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>u});n(96540);var a=n(15680);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const l={title:"Great Expectations",slug:"/metadata-ingestion/integration_docs/great-expectations",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/integration_docs/great-expectations.md"},s="Great Expectations",p={unversionedId:"metadata-ingestion/integration_docs/great-expectations",id:"version-0.14.0/metadata-ingestion/integration_docs/great-expectations",title:"Great Expectations",description:"This guide helps to setup and configure DataHubValidationAction in Great Expectations to send assertions(expectations) and their results to DataHub using DataHub's Python Rest emitter.",source:"@site/versioned_docs/version-0.14.0/metadata-ingestion/integration_docs/great-expectations.md",sourceDirName:"metadata-ingestion/integration_docs",slug:"/metadata-ingestion/integration_docs/great-expectations",permalink:"/docs/0.14.0/metadata-ingestion/integration_docs/great-expectations",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/integration_docs/great-expectations.md",tags:[],version:"0.14.0",frontMatter:{title:"Great Expectations",slug:"/metadata-ingestion/integration_docs/great-expectations",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/integration_docs/great-expectations.md"}},c={},u=[{value:"Capabilities",id:"capabilities",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Setting up",id:"setting-up",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Learn more",id:"learn-more",level:2}],g={toc:u},d="wrapper";function m(e){var{components:t}=e,n=o(e,["components"]);return(0,a.yg)(d,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"great-expectations"},"Great Expectations"),(0,a.yg)("p",null,"This guide helps to setup and configure ",(0,a.yg)("inlineCode",{parentName:"p"},"DataHubValidationAction")," in Great Expectations to send assertions(expectations) and their results to DataHub using DataHub's Python Rest emitter."),(0,a.yg)("h2",{id:"capabilities"},"Capabilities"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"DataHubValidationAction")," pushes assertions metadata to DataHub. This includes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Assertion Details"),": Details of assertions (i.e. expectation) set on a Dataset (Table). "),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Assertion Results"),": Evaluation results for an assertion tracked over time. ")),(0,a.yg)("p",null,"This integration supports v3 api datasources using SqlAlchemyExecutionEngine. "),(0,a.yg)("h2",{id:"limitations"},"Limitations"),(0,a.yg)("p",null,"This integration does not support"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"v2 Datasources such as SqlAlchemyDataset"),(0,a.yg)("li",{parentName:"ul"},"v3 Datasources using execution engine other than SqlAlchemyExecutionEngine (Spark, Pandas)"),(0,a.yg)("li",{parentName:"ul"},"Cross-dataset expectations (those involving > 1 table)")),(0,a.yg)("h2",{id:"setting-up"},"Setting up"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Install the required dependency in your Great Expectations environment.  ",(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[great-expectations]'\n")))),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},"To add ",(0,a.yg)("inlineCode",{parentName:"li"},"DataHubValidationAction")," in Great Expectations Checkpoint, add following configuration in action_list for your Great Expectations ",(0,a.yg)("inlineCode",{parentName:"li"},"Checkpoint"),". For more details on setting action_list, see ",(0,a.yg)("a",{parentName:"li",href:"https://docs.greatexpectations.io/docs/reference/checkpoints_and_actions/"},"Checkpoints and Actions")," ",(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-yml"},"action_list:\n  - name: datahub_action\n    action:\n      module_name: datahub.integrations.great_expectations.action\n      class_name: DataHubValidationAction\n      server_url: http://localhost:8080 #datahub server url\n")),(0,a.yg)("strong",{parentName:"li"},"Configuration options:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"server_url")," (required): URL of DataHub GMS endpoint"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"env"),' (optional, defaults to "PROD"): Environment to use in namespace when constructing dataset URNs.'),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"exclude_dbname")," (optional): Exclude dbname / catalog when constructing dataset URNs. (Highly applicable to Trino / Presto where we want to omit catalog e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"hive"),")"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"platform_alias")," (optional): Platform alias when constructing dataset URNs. e.g. main data platform is ",(0,a.yg)("inlineCode",{parentName:"li"},"presto-on-hive")," but using ",(0,a.yg)("inlineCode",{parentName:"li"},"trino")," to run the test"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"platform_instance_map")," (optional): Platform instance mapping to use when constructing dataset URNs. Maps the GX 'data source' name to a platform instance on DataHub. e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},'platform_instance_map: { "datasource_name": "warehouse" }')),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"graceful_exceptions")," (defaults to true): If set to true, most runtime errors in the lineage backend will be suppressed and will not cause the overall checkpoint to fail. Note that configuration issues will still throw exceptions."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"token")," (optional): Bearer token used for authentication."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"timeout_sec")," (optional): Per-HTTP request timeout."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"retry_status_codes")," (optional): Retry HTTP request also on these status codes."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"retry_max_times")," (optional): Maximum times to retry if HTTP request fails. The delay between retries is increased exponentially."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"extra_headers")," (optional): Extra headers which will be added to the datahub request."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"parse_table_names_from_sql")," (defaults to false): The integration can use an SQL parser to try to parse the datasets being asserted. This parsing is disabled by default, but can be enabled by setting ",(0,a.yg)("inlineCode",{parentName:"li"},"parse_table_names_from_sql: True"),".  The parser is based on the ",(0,a.yg)("a",{parentName:"li",href:"https://pypi.org/project/sqllineage/"},(0,a.yg)("inlineCode",{parentName:"a"},"sqllineage"))," package."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"convert_urns_to_lowercase")," (optional): Whether to convert dataset urns to lowercase.")))),(0,a.yg)("h2",{id:"debugging"},"Debugging"),(0,a.yg)("p",null,"Set environment variable ",(0,a.yg)("inlineCode",{parentName:"p"},"DATAHUB_DEBUG")," (default ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),") to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," to enable debug logging for ",(0,a.yg)("inlineCode",{parentName:"p"},"DataHubValidationAction"),"."),(0,a.yg)("h2",{id:"learn-more"},"Learn more"),(0,a.yg)("p",null,"To see the Great Expectations in action, check out ",(0,a.yg)("a",{parentName:"p",href:"https://www.loom.com/share/d781c9f0b270477fb5d6b0c26ef7f22d"},"this demo")," from the Feb 2022 townhall."))}m.isMDXComponent=!0}}]);